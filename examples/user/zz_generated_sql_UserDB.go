// Code generated by go-gendb. DO NOT EDIT.
// go-gendb version: 0.0.1
// source: examples/user/user.db.go
package user

import (
	sql "database/sql"
	runner "github.com/fioncat/go-gendb/api/sqlrunner"
)

var (
	UserDBOper        = &UserDBImpl{}
	runner_Add        = runner.New(sql_Add)
	runner_Update     = runner.New(sql_Update)
	runner_FindByID   = runner.New(sql_FindByID)
	runner_FindByName = runner.New(sql_FindByName)
	runner_Search     = runner.New(sql_Search)
	runner_Count      = runner.New(sql_Count)
)

const (
	sql_Add        = "INSERT INTO user(name, email, phone, age, password) VALUES (?, ?, ?, ?);"
	sql_Update     = "UPDATE user SET name=?, email=?, phone=?, password=? WHERE id=?;"
	sql_FindByID   = "SELECT id, name, email, phone, age, password, create_time, is_admin FROM user WHERE id=?;"
	sql_FindByName = "SELECT id, name, email, phone, age, password, create_time, is_admin FROM user WHERE name=?;"
	sql_Search     = "SELECT id, name, email, phone, age, password, create_time, is_admin FROM user WHERE 1=1 %v LIMIT ?, ?;"
	sql_Count      = "SELECT COUNT(1) FROM user WHERE 1=1 %v;"
)

// UserDBImpl implement of UserDB
type UserDBImpl struct {
}

// Add implement of Add
func (*UserDBImpl) Add(db *sql.DB, u *User) (int64, error) {
	return runner_Add.ExecAffect(db, nil, []interface{}{u.Name, u.Email, u.Phone, u.Password})
}

// Update implement of Update
func (*UserDBImpl) Update(db *sql.DB, u *User) (int64, error) {
	return runner_Update.ExecAffect(db, nil, []interface{}{u.Name, u.Email, u.Phone, u.Password, u.Id})
}

// FindByID implement of FindByID
func (*UserDBImpl) FindByID(db *sql.DB, id int64) (*User, error) {
	var o *User
	err := runner_FindByID.QueryOne(db, nil, []interface{}{id}, func(rows *sql.Rows) error {
		o = new(User)
		return rows.Scan(&o.Id, &o.Name, &o.Email, &o.Phone, &o.Age, &o.Password, &o.CreateTime, &o.IsAdmin)
	})
	return o, err
}

// FindByName implement of FindByName
func (*UserDBImpl) FindByName(db *sql.DB, name string) ([]*User, error) {
	var os []*User
	err := runner_FindByName.QueryMany(db, nil, []interface{}{name}, func(rows *sql.Rows) error {
		o := new(User)
		err := rows.Scan(&o.Id, &o.Name, &o.Email, &o.Phone, &o.Age, &o.Password, &o.CreateTime, &o.IsAdmin)
		if err != nil {
			return err
		}
		os = append(os, o)
		return nil
	})
	return os, err
}

// Search implement of Search
func (*UserDBImpl) Search(db *sql.DB, where string, offset int32, limit int32) ([]*User, error) {
	var os []*User
	err := runner_Search.QueryMany(db, []interface{}{where}, []interface{}{offset, limit}, func(rows *sql.Rows) error {
		o := new(User)
		err := rows.Scan(&o.Id, &o.Name, &o.Email, &o.Phone, &o.Age, &o.Password, &o.CreateTime, &o.IsAdmin)
		if err != nil {
			return err
		}
		os = append(os, o)
		return nil
	})
	return os, err
}

// Count implement of Count
func (*UserDBImpl) Count(db *sql.DB, where string) (int64, error) {
	var o int64
	err := runner_Count.QueryOne(db, []interface{}{where}, nil, func(rows *sql.Rows) error {
		return rows.Scan(&o)
	})
	return o, err
}
