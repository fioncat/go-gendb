// Code generated by go-gendb. DO NOT EDIT.
// go-gendb version: 0.0.1
// source: examples/user/user.db.go
package user

import (
	sql "database/sql"
	runner "github.com/fioncat/go-gendb/api/sqlrunner"
)

var (
	genUserOps         = &genUserOpsImpl{}
	runner_add         = runner.New(sql_add)
	runner_update      = runner.New(sql_update)
	runner_findById    = runner.New(sql_findById)
	runner_search      = runner.New(sql_search)
	runner_searchConds = runner.New(sql_searchConds)
	runner_count       = runner.New(sql_count)
	runner_countAdmin  = runner.New(sql_countAdmin)
)

const (
	sql_add         = "INSERT INTO user(name, email, phone, age) VALUES (?, ?, ?, ?)"
	sql_update      = "UPDATE user SET name=?, email=?, phone=?, age=? WHERE id=?"
	sql_findById    = "SELECT id, name, email, phone, age, create_time, password, is_admin FROM user WHERE id=?"
	sql_search      = "SELECT id, name, email, phone, age, create_time, password, is_admin FROM user WHERE is_delete=0 AND %v"
	sql_searchConds = "SELECT id, name, email, phone, age, create_time, password, is_admin FROM user WHERE email=? OR phone=?"
	sql_count       = "SELECT COUNT(1) FROM user"
	sql_countAdmin  = "SELECT COUNT(1) FROM user WHERE is_admin=?"
)

// genUserOpsImpl implement of genUserOps
type genUserOpsImpl struct {
}

// add implement of add
func (*genUserOpsImpl) add(db *sql.DB, u *User) (int64, error) {
	return runner_add.ExecLastId(db, nil, []interface{}{u.Name, u.Email, u.Phone, u.Age})
}

// update implement of update
func (*genUserOpsImpl) update(db *sql.DB, u *User) (int64, error) {
	return runner_update.ExecAffect(db, nil, []interface{}{u.Name, u.Email, u.Phone, u.Age, u.Id})
}

// findById implement of findById
func (*genUserOpsImpl) findById(db *sql.DB, id int64) (*User, error) {
	var o *User
	err := runner_findById.QueryOne(db, nil, []interface{}{id}, func(rows *sql.Rows) error {
		o = new(User)
		return rows.Scan(&o.Id, &o.Name, &o.Email, &o.Phone, &o.Age, &o.CreateTime, &o.Password, &o.IsAdmin)
	})
	return o, err
}

// search implement of search
func (*genUserOpsImpl) search(db *sql.DB, where string) ([]User, error) {
	var os []User
	err := runner_search.QueryMany(db, []interface{}{where}, nil, func(rows *sql.Rows) error {
		var o User
		err := rows.Scan(&o.Id, &o.Name, &o.Email, &o.Phone, &o.Age, &o.CreateTime, &o.Password, &o.IsAdmin)
		if err != nil {
			return err
		}
		os = append(os, o)
		return nil
	})
	return os, err
}

// searchConds implement of searchConds
func (*genUserOpsImpl) searchConds(db *sql.DB, email string, phone string) ([]*User, error) {
	var os []*User
	err := runner_searchConds.QueryMany(db, nil, []interface{}{email, phone}, func(rows *sql.Rows) error {
		o := new(User)
		err := rows.Scan(&o.Id, &o.Name, &o.Email, &o.Phone, &o.Age, &o.CreateTime, &o.Password, &o.IsAdmin)
		if err != nil {
			return err
		}
		os = append(os, o)
		return nil
	})
	return os, err
}

// count implement of count
func (*genUserOpsImpl) count(db *sql.DB) (int32, error) {
	var o int32
	err := runner_count.QueryOne(db, nil, nil, func(rows *sql.Rows) error {
		return rows.Scan(&o)
	})
	return o, err
}

// countAdmin implement of countAdmin
func (*genUserOpsImpl) countAdmin(db *sql.DB, admin int32) (int64, error) {
	var o int64
	err := runner_countAdmin.QueryOne(db, nil, []interface{}{admin}, func(rows *sql.Rows) error {
		return rows.Scan(&o)
	})
	return o, err
}
