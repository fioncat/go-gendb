// Code generated by go-gendb, DO NOT EDIT.
// go-gendb version: 0.3
// source: samples/complicated-sql/oper.go
package db

import (
	run "github.com/fioncat/go-gendb/api/sql/run"
	sql "database/sql"
)

// all sql statement(s) to use
const (
	_BaseOper_Get           = "SELECT pp.status PlatformStatus, pp.id PlatformId, p.status BaseStatus, p.products_uid Uid, ifnull(bp.origin_name, '') BrandName, ifnull(pe.ezbuy_category_id,0) Pcid, ifnull(pe.ref_id, '') RefId, ifnull(pe.origin_code, '') Region, ifnull(mme.manufacturers_id, 0) ManufactureId, ifnull(mme.manufacturers_name, '') Manufacture, ifnull(mme.vendor_id_ezbuy, 0) VendorId, ifnull(mme.vendor_ezbuy, '') VendorName, ifnull(pe.text_desc, '') Text, ifnull(pe.delivery_method, 0) DeliveryMethod, ifnull(pe.location, '') Location, ifnull(pe.is_sensitive_item, 0) IsSens, ifnull(pdi.sell_types_id, 0) SellType FROM products p LEFT JOIN products_to_brands ptb ON ptb.products_id=p.id AND ptb.status=1 LEFT JOIN brands_pub bp ON bp.brand_id=ptb.brands_id AND bp.status=1 LEFT JOIN products_ezbuy pe ON p.id=pe.products_id LEFT JOIN manufactures_mapping_ezbuy mme ON p.manufacturers_id=mme.manufacturers_id LEFT JOIN products_platform pp ON pp.products_id=p.id LEFT JOIN products_detail_info pdi ON pdi.products_id=p.id WHERE p.id=?;"
	_BaseOper_GetImgs       = "SELECT pi.id, pip.images_url Url, pi.is_default, pi.sort_order FROM products_images_platform pip JOIN products_images pi ON pip.products_images_id=pi.id AND pi.status=1 JOIN products_images_tags pit ON pit.products_images_id=pip.products_images_id AND pit.status=1 AND pit.tag_id=20 WHERE pip.products_platform_id=?;"
	_BaseOper_GetTitle      = "SELECT lang.code Code, ifnull(pc.products_name,'') Name FROM products_cms pc JOIN languages lang ON lang.languages_id=pc.languages_id WHERE pc.products_id=? AND lang.code IN ('en','cn','tw','th');"
	_BaseOper_GetDescAttrs  = "SELECT ifnull(attr.name,'') Name, val.value Value, pda.sort_order SortOrder FROM products_desc_attributes pda JOIN desc_attributes attr ON attr.id=pda.desc_attributes_id JOIN desc_attributes_values val ON val.id=pda.desc_attributes_values_id WHERE pda.products_id=? AND attr.status=1 AND val.status=1 AND pda.status=1;"
	_BaseOper_GetDescImgs   = "SELECT pdp.cdn_url Url, pd.sort_order FROM products_descriptions_platform pdp JOIN products_descriptions pd ON pdp.products_descriptions_id=pd.id WHERE pd.`type`='img' AND pd.status=1 AND pd.products_id=?;"
	_BaseOper_GetDescVideos = "SELECT pvp.video_cdn_url Url, ifnull(pvp.thumbnail_cdn_url, '') Preview, pv.media_type, pv.show_flag FROM products_videos_platform pvp JOIN products_videos pv ON pvp.products_videos_id=pv.id WHERE pv.status=1 AND pv.products_id=?;"
	_BaseOper_EzGpid        = "SELECT ppe.old_products_id FROM products_platform pp JOIN products_platform_extend ppe ON pp.id=ppe.products_platform_id WHERE pp.products_id=?;"
	_BaseOper_IsSenstive    = "SELECT ifnull(is_sensitive_item, 0) FROM products_ezbuy WHERE products_id=?;"
	_BaseOper_ManufactureId = "SELECT ifnull(manufacturers_id, 0) FROM products WHERE id=?;"
	_BaseOper_SellerType    = "SELECT sell_types_id FROM products_detail_info WHERE products_id=?"
	_BaseOper_Platform      = "SELECT platform FROM products_platform WHERE products_id=?;"
	_BaseOper_Warehouse     = "SELECT warehouse Name, fee FROM products_ezbuy_freight WHERE products_id=?"
	_BaseOper_ShipmentTypes = "SELECT pst.sensitive_country Catalog, pst.sensitive_type Type FROM products_shipping_type pst WHERE pst.products_uid=?"
)

var BaseOper = &_BaseOper{}

// Base is a struct auto generated by BaseOper.Get
type Base struct {
	PlatformStatus int32  `table:"products_platform" field:"status"`
	PlatformId     int64  `table:"products_platform" field:"id"`
	BaseStatus     int32  `table:"products" field:"status"`
	Uid            string `table:"products" field:"products_uid"`
	BrandName      string `table:"brands_pub" field:"origin_name"`
	Pcid           int32  `table:"products_ezbuy" field:"ezbuy_category_id"`
	RefId          string `table:"products_ezbuy" field:"ref_id"`
	Region         string `table:"products_ezbuy" field:"origin_code"`
	ManufactureId  int32  `table:"manufactures_mapping_ezbuy" field:"manufacturers_id"`
	Manufacture    string `table:"manufactures_mapping_ezbuy" field:"manufacturers_name"`
	VendorId       int32  `table:"manufactures_mapping_ezbuy" field:"vendor_id_ezbuy"`
	VendorName     string `table:"manufactures_mapping_ezbuy" field:"vendor_ezbuy"`
	Text           string `table:"products_ezbuy" field:"text_desc"`
	DeliveryMethod int32  `table:"products_ezbuy" field:"delivery_method"`
	Location       string `table:"products_ezbuy" field:"location"`
	IsSens         int32  `table:"products_ezbuy" field:"is_sensitive_item"`
	SellType       int32  `table:"products_detail_info" field:"sell_types_id"`
}

// Img is a struct auto generated by BaseOper.GetImgs
type Img struct {
	Id        int64  `table:"products_images" field:"id"`
	Url       string `table:"products_images_platform" field:"images_url"`
	IsDefault int32  `table:"products_images" field:"is_default"`
	SortOrder int32  `table:"products_images" field:"sort_order"`
}

// Title is a struct auto generated by BaseOper.GetTitle
type Title struct {
	Code string `table:"languages" field:"code"`
	Name string `table:"products_cms" field:"products_name"`
}

// DescAttr is a struct auto generated by BaseOper.GetDescAttrs
type DescAttr struct {
	Name      string `table:"desc_attributes" field:"name"`
	Value     string `table:"desc_attributes_values" field:"value"`
	SortOrder int32  `table:"products_desc_attributes" field:"sort_order"`
}

// DescImg is a struct auto generated by BaseOper.GetDescImgs
type DescImg struct {
	Url       string `table:"products_descriptions_platform" field:"cdn_url"`
	SortOrder int32  `table:"products_descriptions" field:"sort_order"`
}

// DescVideo is a struct auto generated by BaseOper.GetDescVideos
type DescVideo struct {
	Url       string `table:"products_videos_platform" field:"video_cdn_url"`
	Preview   string `table:"products_videos_platform" field:"thumbnail_cdn_url"`
	MediaType string `table:"products_videos" field:"media_type"`
	ShowFlag  int32  `table:"products_videos" field:"show_flag"`
}

// WarehouseFee is a struct auto generated by BaseOper.Warehouse
type WarehouseFee struct {
	Name string  `table:"products_ezbuy_freight" field:"warehouse"`
	Fee  float64 `table:"products_ezbuy_freight" field:"fee"`
}

// ShipmentType is a struct auto generated by BaseOper.ShipmentTypes
type ShipmentType struct {
	Catalog string `table:"products_shipping_type" field:"sensitive_country"`
	Type    string `table:"products_shipping_type" field:"sensitive_type"`
}

type _BaseOper struct {}

func (*_BaseOper) Get(id int64) (*Base, error) {
	var o *Base
	err := run.QueryOne(getDB(), _BaseOper_Get, nil, []interface{}{id}, func(rows *sql.Rows) error {
		o = new(Base)
		return rows.Scan(&o.PlatformStatus, &o.PlatformId, &o.BaseStatus, &o.Uid, &o.BrandName, &o.Pcid, &o.RefId, &o.Region, &o.ManufactureId, &o.Manufacture, &o.VendorId, &o.VendorName, &o.Text, &o.DeliveryMethod, &o.Location, &o.IsSens, &o.SellType)
	})
	return o, err
}

func (*_BaseOper) GetImgs(pid int64) ([]*Img, error) {
	var os []*Img
	err := run.QueryMany(getDB(), _BaseOper_GetImgs, nil, []interface{}{pid}, func(rows *sql.Rows) error {
		o := new(Img)
		err := rows.Scan(&o.Id, &o.Url, &o.IsDefault, &o.SortOrder)
		if err != nil {
			return err
		}
		os = append(os, o)
		return nil
	})
	return os, err
}

func (*_BaseOper) GetTitle(id int64) ([]*Title, error) {
	var os []*Title
	err := run.QueryMany(getDB(), _BaseOper_GetTitle, nil, []interface{}{id}, func(rows *sql.Rows) error {
		o := new(Title)
		err := rows.Scan(&o.Code, &o.Name)
		if err != nil {
			return err
		}
		os = append(os, o)
		return nil
	})
	return os, err
}

func (*_BaseOper) GetDescAttrs(id int64) ([]*DescAttr, error) {
	var os []*DescAttr
	err := run.QueryMany(getDB(), _BaseOper_GetDescAttrs, nil, []interface{}{id}, func(rows *sql.Rows) error {
		o := new(DescAttr)
		err := rows.Scan(&o.Name, &o.Value, &o.SortOrder)
		if err != nil {
			return err
		}
		os = append(os, o)
		return nil
	})
	return os, err
}

func (*_BaseOper) GetDescImgs(id int64) ([]*DescImg, error) {
	var os []*DescImg
	err := run.QueryMany(getDB(), _BaseOper_GetDescImgs, nil, []interface{}{id}, func(rows *sql.Rows) error {
		o := new(DescImg)
		err := rows.Scan(&o.Url, &o.SortOrder)
		if err != nil {
			return err
		}
		os = append(os, o)
		return nil
	})
	return os, err
}

func (*_BaseOper) GetDescVideos(id int64) ([]*DescVideo, error) {
	var os []*DescVideo
	err := run.QueryMany(getDB(), _BaseOper_GetDescVideos, nil, []interface{}{id}, func(rows *sql.Rows) error {
		o := new(DescVideo)
		err := rows.Scan(&o.Url, &o.Preview, &o.MediaType, &o.ShowFlag)
		if err != nil {
			return err
		}
		os = append(os, o)
		return nil
	})
	return os, err
}

func (*_BaseOper) EzGpid(id int64) (int64, error) {
	var o int64
	err := run.QueryOne(getDB(), _BaseOper_EzGpid, nil, []interface{}{id}, func(rows *sql.Rows) error {
		return rows.Scan(&o)
	})
	return o, err
}

func (*_BaseOper) IsSenstive(id int64) (bool, error) {
	var o bool
	err := run.QueryOne(getDB(), _BaseOper_IsSenstive, nil, []interface{}{id}, func(rows *sql.Rows) error {
		return rows.Scan(&o)
	})
	return o, err
}

func (*_BaseOper) ManufactureId(id int64) (int32, error) {
	var o int32
	err := run.QueryOne(getDB(), _BaseOper_ManufactureId, nil, []interface{}{id}, func(rows *sql.Rows) error {
		return rows.Scan(&o)
	})
	return o, err
}

func (*_BaseOper) SellerType(id int64) (int32, error) {
	var o int32
	err := run.QueryOne(getDB(), _BaseOper_SellerType, nil, []interface{}{id}, func(rows *sql.Rows) error {
		return rows.Scan(&o)
	})
	return o, err
}

func (*_BaseOper) Platform(id int64) (string, error) {
	var o string
	err := run.QueryOne(getDB(), _BaseOper_Platform, nil, []interface{}{id}, func(rows *sql.Rows) error {
		return rows.Scan(&o)
	})
	return o, err
}

func (*_BaseOper) Warehouse(id int64) ([]WarehouseFee, error) {
	var os []WarehouseFee
	err := run.QueryMany(getDB(), _BaseOper_Warehouse, nil, []interface{}{id}, func(rows *sql.Rows) error {
		var o WarehouseFee
		err := rows.Scan(&o.Name, &o.Fee)
		if err != nil {
			return err
		}
		os = append(os, o)
		return nil
	})
	return os, err
}

func (*_BaseOper) ShipmentTypes(uid string) ([]ShipmentType, error) {
	var os []ShipmentType
	err := run.QueryMany(getDB(), _BaseOper_ShipmentTypes, nil, []interface{}{uid}, func(rows *sql.Rows) error {
		var o ShipmentType
		err := rows.Scan(&o.Catalog, &o.Type)
		if err != nil {
			return err
		}
		os = append(os, o)
		return nil
	})
	return os, err
}