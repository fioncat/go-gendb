// Code generated by go-gendb, DO NOT EDIT.
// go-gendb version: 0.3
// source: samples/complicated-sql/oper.go
package db

import (
	run "github.com/fioncat/go-gendb/api/sql/run"
	sql "database/sql"
)

// all sql statement(s) to use
const (
	_FestivalOper_List = "SELECT supplier_id Id, start_date, end_date FROM supplier_festival_range WHERE status=1 AND end_date>=?"
	_FestivalOper_Get  = "SELECT supplier_id Id, start_date, end_date FROM supplier_festival_range WHERE status=1 AND supplier_id=? AND end_date>=?"
)

var FestivalOper = &_FestivalOper{}

// Festival is a struct auto generated by FestivalOper.List
type Festival struct {
	Id        int32  `table:"supplier_festival_range" field:"supplier_id"`
	StartDate string `table:"supplier_festival_range" field:"start_date"`
	EndDate   string `table:"supplier_festival_range" field:"end_date"`
}

type _FestivalOper struct {}

func (*_FestivalOper) List(now string) ([]Festival, error) {
	var os []Festival
	err := run.QueryMany(getDB(), _FestivalOper_List, nil, []interface{}{now}, func(rows *sql.Rows) error {
		var o Festival
		err := rows.Scan(&o.Id, &o.StartDate, &o.EndDate)
		if err != nil {
			return err
		}
		os = append(os, o)
		return nil
	})
	return os, err
}

func (*_FestivalOper) Get(now string) ([]Festival, error) {
	var os []Festival
	err := run.QueryMany(getDB(), _FestivalOper_Get, nil, []interface{}{id, now}, func(rows *sql.Rows) error {
		var o Festival
		err := rows.Scan(&o.Id, &o.StartDate, &o.EndDate)
		if err != nil {
			return err
		}
		os = append(os, o)
		return nil
	})
	return os, err
}