// Code generated by go-gendb, DO NOT EDIT.
// go-gendb version: 0.3
// source: samples/deepcopy/item.go
package item

import bson "gopkg.in/mgo.v2/bson"

func (o *Base) DeepCopy (res *Base) {
	res = new(Base)
	res.ID = o.ID
	res.Gpid = o.Gpid
	res.Region = o.Region
	res.Vendor = o.Vendor
	res.VendorId = o.VendorId
	res.InSale = o.InSale
	res.Pcid = o.Pcid
	res.Brand = o.Brand
	res.Catalog = make(map[string]BaseCatalog, len(o.Catalog))
	for key0, val0 := range o.Catalog {
		res.Catalog[key0] = val0
	}
	res.Skus = make([]int64, len(o.Skus))
	for idx0, e0 := range o.Skus {
		res.Skus[idx0] = e0
	}
	res.RemovedSkus = make([]int64, len(o.RemovedSkus))
	for idx0, e0 := range o.RemovedSkus {
		res.RemovedSkus[idx0] = e0
	}
	res.Platform = o.Platform
	res.RefId = o.RefId
	res.EstWeight = o.EstWeight
	res.EstSetWeight = o.EstSetWeight
	res.EstPrimeWeight = o.EstPrimeWeight
	res.MinWeight = o.MinWeight
	res.AllDcids = make([]int32, len(o.AllDcids))
	for idx0, e0 := range o.AllDcids {
		res.AllDcids[idx0] = e0
	}
	res.DcidPath = make([][]int32, len(o.DcidPath))
	for idx0, e0 := range o.DcidPath {
		slice0 := make([]int32, len(e0))
		for idx1, e1 := range e0 {
			slice0[idx1] = e1
		}
		res.DcidPath[idx0] = slice0
	}
	res.DcidPathMap = make(map[string][][]int32, len(o.DcidPathMap))
	for key0, val0 := range o.DcidPathMap {
		slice0 := make([][]int32, len(val0))
		for idx1, e1 := range val0 {
			slice1 := make([]int32, len(e1))
			for idx2, e2 := range e1 {
				slice1[idx2] = e2
			}
			slice0[idx1] = slice1
		}
		res.DcidPathMap[key0] = slice0
	}
	res.PlatformCid = make([]int64, len(o.PlatformCid))
	for idx0, e0 := range o.PlatformCid {
		res.PlatformCid[idx0] = e0
	}
	res.PlatformScid = make([]string, len(o.PlatformScid))
	for idx0, e0 := range o.PlatformScid {
		res.PlatformScid[idx0] = e0
	}
	res.PlatformSite = o.PlatformSite
	res.PlatformUrl = o.PlatformUrl
	res.PlatformShop = o.PlatformShop
	res.InternalUrl = o.InternalUrl
	res.Acts = make([]ActivityItem, len(o.Acts))
	for idx0, e0 := range o.Acts {
		res.Acts[idx0] = e0
	}
	res.CreateDate = o.CreateDate
	res.UpdateDate = o.UpdateDate
	res.ListingScore = o.ListingScore
	res.Pvids = make([]int32, len(o.Pvids))
	for idx0, e0 := range o.Pvids {
		res.Pvids[idx0] = e0
	}
	res.IsPremium = o.IsPremium
	res.ForcePremium = o.ForcePremium
	res.IsValuable = o.IsValuable
	res.IsFragile = o.IsFragile
	res.IsSplittable = o.IsSplittable
	res.IsThirdPartySeller = o.IsThirdPartySeller
	res.Version = o.Version
	res.AllBanRules = make([]bson.ObjectId, len(o.AllBanRules))
	for idx0, e0 := range o.AllBanRules {
		res.AllBanRules[idx0] = e0
	}
	res.NoEzbuy = o.NoEzbuy
	res.From = make([]int32, len(o.From))
	for idx0, e0 := range o.From {
		res.From[idx0] = e0
	}
	res.InSaleTimeFrom = o.InSaleTimeFrom
	res.InSaleTimeTo = o.InSaleTimeTo
	res.MinPrice = o.MinPrice
	res.MaxPrice = o.MaxPrice
	res.DeliveryMethod = o.DeliveryMethod
	res.SaleType = o.SaleType
	res.isNew = o.isNew
	return
}