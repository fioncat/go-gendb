// Code generated by go-gendb, DO NOT EDIT.
// go-gendb version: 0.3
// source: samples/orm-sql/user_orm.go
package user

import (
	sql "database/sql"
	run "github.com/fioncat/go-gendb/api/sql/run"
	strings "strings"
	fmt "fmt"
)

const (
	DetailFieldId      = "id"
	DetailFieldUserId  = "user_id"
	DetailFieldText    = "text"
	DetailFieldBalance = "balance"
	DetailFieldScore   = "score"
)

const (
	_Detail_InsertOne    = "INSERT INTO `user_detail`(`user_id`,`text`,`balance`,`score`) VALUES (?,?,?,?)"
	_Detail_InsertBatch  = "INSERT INTO `user_detail`(`user_id`,`text`,`balance`,`score`) VALUES %s"
	_Detail_InsertValues = "(?,?,?,?)"
	_Detail_FindById     = "SELECT `id`,`user_id`,`text`,`balance`,`score` FROM `user_detail` WHERE `id`=?"
	_Detail_DeleteById   = "DELETE FROM `user_detail` WHERE `id`=?"
	_Detail_UpdateById   = "UPDATE `user_detail` SET `user_id`=?,`text`=?,`balance`=?,`score`=? WHERE `id`=?"
	_Detail_Count        = "SELECT COUNT(1) FROM `user_detail`"
)

const _Detail_FindOneByUserId = "SELECT `id`,`user_id`,`text`,`balance`,`score` FROM `user_detail` WHERE `user_id`=?"

var DetailOper = &_DetailOper{}

type _DetailOper struct {}

// Detail 用户详情表
type Detail struct {
	Id      int64  `field:"id"`
	UserId  int64  `field:"user_id"`
	Text    string `field:"text"`
	Balance int32  `field:"balance"`
	Score   int32  `field:"score"`
}

func (*_DetailOper) Insert(db run.IDB, o *Detail) (sql.Result, error) {
	return run.Exec(db, _Detail_InsertOne, nil, []interface{}{o.UserId, o.Text, o.Balance, o.Score})
}

func (*_DetailOper) InsertBatch(db run.IDB, os []*Detail) (sql.Result, error) {
	vs := make([]interface{}, 0, 5*len(os))
	valStrs := make([]string, len(os))
	for idx, o := range os {
		valStrs[idx] = _Detail_InsertValues
		vs = append(vs, o.UserId, o.Text, o.Balance, o.Score)
	}
	valStr := strings.Join(valStrs, ", ")
	_sql := fmt.Sprintf(_Detail_InsertBatch, valStr)
	return run.Exec(db, _sql, nil, vs)
}

func (*_DetailOper) FindById(db run.IDB, id int64) (*Detail, error) {
	var o *Detail
	err := run.QueryOne(db, _Detail_FindById, nil, []interface{}{id}, func(rows *sql.Rows) error {
		o = new(Detail)
		return rows.Scan(&o.Id, &o.UserId, &o.Text, &o.Balance, &o.Score)
	})
	return o, err
}

func (*_DetailOper) DeleteById(db run.IDB, id int64) (sql.Result, error) {
	return run.Exec(db, _Detail_DeleteById, nil, []interface{}{id})
}

func (*_DetailOper) UpdateById(db run.IDB, o *Detail) (sql.Result, error) {
	return run.Exec(db, _Detail_UpdateById, nil, []interface{}{o.UserId, o.Text, o.Balance, o.Score, o.Id})
}

func (*_DetailOper) Count(db run.IDB) (int64, error) {
	var cnt int64
	err := run.QueryOne(db, _Detail_Count, nil, nil, func(rows *sql.Rows) error {
		return rows.Scan(&cnt)
	})
	return cnt, err
}

func (*_DetailOper) FindOneByUserId(db run.IDB, userId int64) (*Detail, error) {
	var o *Detail
	err := run.QueryOne(db, _Detail_FindOneByUserId, nil, []interface{}{userId}, func(rows *sql.Rows) error {
		o = new(Detail)
		return rows.Scan(&o.Id, &o.UserId, &o.Text, &o.Balance, &o.Score)
	})
	return o, err
}