// Code generated by go-gendb. DO NOT EDIT.
// go-gendb version: 0.1.0
// source: oper.go
package user

import (
	runner "github.com/fioncat/go-gendb/api/sqlrunner"
	sql "database/sql"
)

var (
	runner_UserDb_FindAdmins = runner.New(sql_UserDb_FindAdmins)
	runner_UserDb_Count      = runner.New(sql_UserDb_Count)
	runner_UserDb_UpdateAge  = runner.New(sql_UserDb_UpdateAge)
	runner_UserDb_DeleteUser = runner.New(sql_UserDb_DeleteUser)
	runner_UserDb_FindById   = runner.New(sql_UserDb_FindById)
)

const (
	sql_UserDb_FindAdmins = "SELECT 	id, name, email, phone, age, create_time, 	password, is_admin, is_delete FROM user WHERE is_admin=1 AND is_delete=0;"
	sql_UserDb_Count      = "SELECT COUNT(1) FROM user WHERE is_delete=0;"
	sql_UserDb_UpdateAge  = "UPDATE user SET age=? WHERE id=?;"
	sql_UserDb_DeleteUser = "UPDATE user SET is_delete=1 WHERE id=?;"
	sql_UserDb_FindById   = "SELECT 	id, name, email, phone, age, create_time, 	password, is_admin, is_delete FROM user WHERE id=? AND is_delete=0;"
)

// _UserDbImpl implement of UserDb
type _UserDbImpl struct {
}

var UserDbOper UserDb = &_UserDbImpl{}

// FindAdmins implement of UserDb.FindAdmins
func (*_UserDbImpl) FindAdmins(db *sql.DB) ([]*User, error) {
	var os []*User
	err := runner_UserDb_FindAdmins.QueryMany(db, nil, nil, func(rows *sql.Rows) error {
		o := new(User)
		err := rows.Scan(&o.Id, &o.Name, &o.Email, &o.Phone, &o.Age, &o.CreateTime, &o.Password, &o.IsAdmin, &o.IsDelete)
		if err != nil {
			return err
		}
		os = append(os, o)
		return nil
	})
	return os, err
}

// Count implement of UserDb.Count
func (*_UserDbImpl) Count(db *sql.DB) (int64, error) {
	var o int64
	err := runner_UserDb_Count.QueryOne(db, nil, nil, func(rows *sql.Rows) error {
		return rows.Scan(&o)
	})
	return o, err
}

// UpdateAge implement of UserDb.UpdateAge
func (*_UserDbImpl) UpdateAge(db *sql.DB, id int64, age int32) (sql.Result, error) {
	return runner_UserDb_UpdateAge.Exec(db, nil, []interface{}{age, id})
}

// DeleteUser implement of UserDb.DeleteUser
func (*_UserDbImpl) DeleteUser(db *sql.DB, id int64) (sql.Result, error) {
	return runner_UserDb_DeleteUser.Exec(db, nil, []interface{}{id})
}

// FindById implement of UserDb.FindById
func (*_UserDbImpl) FindById(db *sql.DB, id int64) (*User, error) {
	var o *User
	err := runner_UserDb_FindById.QueryOne(db, nil, []interface{}{id}, func(rows *sql.Rows) error {
		o = new(User)
		return rows.Scan(&o.Id, &o.Name, &o.Email, &o.Phone, &o.Age, &o.CreateTime, &o.Password, &o.IsAdmin, &o.IsDelete)
	})
	return o, err
}
