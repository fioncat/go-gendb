// Code generated by go-gendb. DO NOT EDIT.
// go-gendb version: 0.1.0
// source: samples/user/oper.go
package user

import (
	runner "github.com/fioncat/go-gendb/api/sqlrunner"
	sql "database/sql"
)

var (
	runner_UserDb_Update    = runner.New(sql_UserDb_Update)
	runner_UserDb_GetDetail = runner.New(sql_UserDb_GetDetail)
	runner_UserDb_GetById   = runner.New(sql_UserDb_GetById)
	runner_UserDb_List      = runner.New(sql_UserDb_List)
)

const (
	sql_UserDb_Update    = "UPDATE user SET name=?, email=?, phone=?, age=?, 	password=? WHERE id=?"
	sql_UserDb_GetDetail = "SELECT user_id, score, balance, text FROM user_detail WHERE user_id=?"
	sql_UserDb_GetById   = "SELECT 	id, name, email, phone, age, create_time, 	password, is_admin FROM user WHERE is_delete=0 AND id=?"
	sql_UserDb_List      = "SELECT id, name, email, phone, age, create_time, password, is_admin FROM user WHERE is_delete=0 LIMIT ?, ?"
)

// _UserDbImpl implement of UserDb
type _UserDbImpl struct {
}

var UserDbOper UserDb = &_UserDbImpl{}

// Update implement of UserDb.Update
func (*_UserDbImpl) Update(db *sql.DB, u *User) (sql.Result, error) {
	return runner_UserDb_Update.Exec(db, nil, []interface{}{u.Name, u.Email, u.Phone, u.Age, u.Password, u.Id})
}

// GetDetail implement of UserDb.GetDetail
func (*_UserDbImpl) GetDetail(db *sql.DB, id string) (*UserDetail, error) {
	var o *UserDetail
	err := runner_UserDb_GetDetail.QueryOne(db, nil, []interface{}{id}, func(rows *sql.Rows) error {
		o = new(UserDetail)
		return rows.Scan(&o.UserId, &o.Score, &o.Balance, &o.Text)
	})
	return o, err
}

// GetById implement of UserDb.GetById
func (*_UserDbImpl) GetById(db *sql.DB, id string) ([]*User, error) {
	var os []*User
	err := runner_UserDb_GetById.QueryMany(db, nil, []interface{}{id}, func(rows *sql.Rows) error {
		o := new(User)
		err := rows.Scan(&o.Id, &o.Name, &o.Email, &o.Phone, &o.Age, &o.CreateTime, &o.Password, &o.IsAdmin)
		if err != nil {
			return err
		}
		os = append(os, o)
		return nil
	})
	return os, err
}

// List implement of UserDb.List
func (*_UserDbImpl) List(db *sql.DB, offset int, limit int) ([]*User, error) {
	var os []*User
	err := runner_UserDb_List.QueryMany(db, nil, []interface{}{offset, limit}, func(rows *sql.Rows) error {
		o := new(User)
		err := rows.Scan(&o.Id, &o.Name, &o.Email, &o.Phone, &o.Age, &o.CreateTime, &o.Password, &o.IsAdmin)
		if err != nil {
			return err
		}
		os = append(os, o)
		return nil
	})
	return os, err
}
